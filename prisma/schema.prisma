datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String?                @unique
  emailVerified    DateTime?
  image            String?
  roleId           Int                    @default(1)
  passwordHash     String?
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime               @default(now())
  role             Role                   @relation(fields: [roleId], references: [id])
  AssignedArea     AssignedArea[]
  Ticket           Ticket[]
  VerficationEmail VerficationEmailUser[]
}

model VerficationEmailUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model VerficationEmailClient {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  clientId  String
  client    EnterpriseClient @relation(fields: [clientId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// The human who is the manager or the owner of the enterprise below
model ManagerClient {
  id               String             @id @default(cuid())
  fullName         String
  rut              String             @unique
  email            String             @unique
  phone            String
  address          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  EnterpriseClient EnterpriseClient[]
  Area             Area[]
}

// Enterprises (Like, Facebook, Spotify, Youtube, etc)
model EnterpriseClient {
  id                     String                   @id @default(cuid())
  fullName               String
  rut                    String                   @unique
  email                  String                   @unique
  phone                  String
  address                String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  managerId              String
  manager                ManagerClient            @relation(fields: [managerId], references: [id])
  Ticket                 Ticket[]
  VerficationEmailClient VerficationEmailClient[]
}

model Area {
  id           String         @id @default(cuid())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  managerId    String
  manager      ManagerClient  @relation(fields: [managerId], references: [id])
  AssignedArea AssignedArea[]
}

model AssignedArea {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  areaId    String
  area      Area     @relation(fields: [areaId], references: [id])
  managerId String
  user      User     @relation(fields: [managerId], references: [id])
  Ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId  String?
}

model TicketPriority {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  Ticket      Ticket[]
}

model Ticket {
  id           String           @id @default(cuid())
  title        String
  description  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  startDate    DateTime?
  endDate      DateTime?
  priorityId   Int
  userId       String
  clientId     String
  finished     Boolean          @default(false)
  AssignedArea AssignedArea[]
  priority     TicketPriority   @relation(fields: [priorityId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
  client       EnterpriseClient @relation(fields: [clientId], references: [id])
}
